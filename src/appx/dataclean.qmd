---
title: "dataclean"
format: html
---

```{r}
# Get the Data

# Read in with tidytuesdayR package 
# Install from CRAN via: install.packages("tidytuesdayR")
# This loads the readme and all the datasets for the week of interest

# Either ISO-8601 date or year/week works!

tuesdata <- tidytuesdayR::tt_load('2021-10-19')
tuesdata <- tidytuesdayR::tt_load(2021, week = 43)

pumpkins <- tuesdata$pumpkins

# Or read in the data manually

pumpkins <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2021/2021-10-19/pumpkins.csv')

```
```{r}
library(dplyr)
library(stringr)
library(ggplot2)
```


#Research Question: What factors influence the weight of competition pumpkins over time and across regions?

#relationship between country and weight (map)
# finish: distribution of weight
#relationship between average weight of pumpkin and time
#relationship between seed_mother and weight
#relationship between father and weight 
```{r}
glimpse(pumpkins)  

```


```{r}
library(dplyr)

pumpkin_clean <- pumpkins %>%
  mutate(
    weight_lbs = as.numeric(weight_lbs),
    seed_mother = as.factor(seed_mother),
    pollinator_father = as.factor(pollinator_father)
  ) %>%
  filter(!is.na(weight_lbs), !is.na(seed_mother), !is.na(pollinator_father))

```

```{r}
library(ggplot2)

pumpkin_clean %>%
  filter(seed_mother %in% names(sort(table(seed_mother), decreasing = TRUE)[1:10])) %>%
  ggplot(aes(x = seed_mother, y = weight_lbs)) +
  geom_boxplot() +
  labs(title = "Pumpkin Weight by Top 10 Seed Mothers", x = "Seed Mother", y = "Weight (lbs)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```
```{r}
library(ggplot2)

pumpkin_clean %>%
  filter(pollinator_father %in% names(sort(table(pollinator_father), decreasing = TRUE)[1:10])) %>%
  ggplot(aes(x = pollinator_father, y = weight_lbs)) +
  geom_boxplot() +
  labs(title = "Pumpkin Weight by Top 10 pollinator_father", x = "pollinator_father", y = "Weight (lbs)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r}
library(tidyverse)

library(tidyverse)

# 提取年份 + 去掉NA
pumpkins <- pumpkins %>%
  mutate(year = as.numeric(str_extract(id, "^\\d{4}"))) %>%
  filter(!is.na(state_prov), !is.na(weight_lbs))

# 找出最多数据的前6个州
top_states <- pumpkins %>%
  count(state_prov, sort = TRUE) %>%
  slice_head(n = 6) %>%
  pull(state_prov)

# 只保留这些州，并且按年取平均
pumpkins_avg <- pumpkins %>%
  filter(state_prov %in% top_states) %>%
  group_by(state_prov, year) %>%
  summarise(avg_weight = mean(as.numeric(weight_lbs), na.rm = TRUE)) %>%
  ungroup()

# 画图
ggplot(pumpkins_avg, aes(x = year, y = avg_weight)) +
  geom_line(color = "blue") +
  geom_point(color = "black", size = 1) +
  facet_wrap(~ state_prov) +
  labs(
    title = "Average Pumpkin Weight Over Time by State (Top 6 States)",
    x = "Year",
    y = "Average Weight (lbs)"
  ) +
  theme_minimal() +
  theme(
    strip.text = element_text(size = 10),
    plot.title = element_text(hjust = 0.5)
  )


```
```{r}
library(tidyverse)
library(maps)
library(ggthemes)

# 1. 提取需要的数据
pumpkins_us <- pumpkins %>%
  filter(country == "United States", !is.na(state_prov), !is.na(weight_lbs)) %>%
  mutate(state_prov = tolower(state_prov))  # 小写以匹配地图数据

# 2. 计算各州平均南瓜重量
state_avg_weight <- pumpkins_us %>%
  group_by(state_prov) %>%
  summarise(avg_weight = mean(as.numeric(weight_lbs), na.rm = TRUE)) %>%
  ungroup()

# 3. 读取美国地图
us_map <- map_data("state")  # map_data("state")是美国各州的轮廓

# 4. 合并地图和南瓜数据
us_map_data <- us_map %>%
  left_join(state_avg_weight, by = c("region" = "state_prov"))

# 5. 画图
ggplot(us_map_data, aes(x = long, y = lat, group = group, fill = avg_weight)) +
  geom_polygon(color = "white") +
  coord_fixed(1.3) +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Avg Weight (lbs)") +
  labs(
    title = "Average Pumpkin Weight by U.S. State",
    subtitle = "Based on GPC competition data (2013-2020)",
    caption = "Data source: TidyTuesday / GPC"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, hjust = 0.5, face = "bold"),
    plot.subtitle = element_text(size = 10, hjust = 0.5),
    legend.position = "bottom",
    panel.background = element_rect(fill = "white", color = NA),
    plot.background = element_rect(fill = "white", color = NA)
  )

```

